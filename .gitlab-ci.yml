# SPDX-FileCopyrightText: 2018-2022 CERN and the Corryvreckan authors
# SPDX-License-Identifier: MIT

variables:
    REPOSITORY: "https://gitlab.cern.ch/corryvreckan/corryvreckan.git"
    EOS_PATH: "/eos/project/c/corryvreckan/www/"
    DOCKER_FILE: etc/docker/Dockerfile

stages:
    - compilation
    - testing
    - formatting
    - documentation
    - packaging
    - deployment

############################
# General target templates #
############################

.centos7:
    image: gitlab-registry.cern.ch/sft/docker/centos7:latest
    tags:
        - docker
    variables:
        COMPILER_TYPE: "gcc"
    before_script:
        - source .ci/init_x86_64.sh
        - mkdir -p build/ && cd build/

.centos8:
    image: gitlab-registry.cern.ch/sft/docker/centos8:latest
    tags:
        - docker
    variables:
        COMPILER_TYPE: "gcc"
    before_script:
        - source .ci/init_x86_64.sh
        - mkdir -p build/ && cd build/

.docker:
    image: gitlab-registry.cern.ch/corryvreckan/corryvreckan/corryvreckan-deps:latest
    tags:
        - docker
    before_script:
        - mkdir -p build/ && cd build/

.lxplus:
    image: gitlab-registry.cern.ch/sft/docker/centos7:latest
    tags:
        - docker
    variables:
        COMPILER_TYPE: "gcc"
    before_script:
        - source etc/setup_lxplus.sh
        - mkdir -p build/ && cd build/

.macos:
    tags:
        - mac
    variables:
        COMPILER_TYPE: "llvm"
    before_script:
        - source .ci/init_x86_64.sh
        - mkdir -p build/ && cd build/


#######################
# Compilation targets #
#######################

# Hidden key to define the default compile job:
.compile:
    stage: compilation
    needs: []
    script:
        - export CCACHE_DIR=`pwd`/ccache
        - cmake -GNinja -DCMAKE_CXX_FLAGS="-Werror" -DBUILD_EventLoaderALiBaVa=ON -DCMAKE_BUILD_TYPE=RELEASE -DROOT_DIR=$ROOTSYS -DEigen3_DIR=$Eigen3_DIR ..
        - ninja -k0
        - ninja install
    artifacts:
        paths:
            - build
            - bin
            - lib
        expire_in: 24 hour

cmp:lxplus-gcc:
    extends:
        - .centos7
        - .compile
    script:
        - cmake -GNinja -DCMAKE_CXX_FLAGS="-Werror" -DBUILD_EventLoaderALiBaVa=ON -DCMAKE_BUILD_TYPE=RELEASE -DROOT_DIR=$ROOTSYS -DEigen3_DIR=$Eigen3_DIR ..
        - ninja -k0
        - ninja install

cmp:docker:
    extends:
        - .docker
        - .compile
    script:
        - cmake -DCMAKE_CXX_FLAGS="-Werror" -DBUILD_EventLoaderALiBaVa=ON -DBUILD_EventLoaderEUDAQ2=ON -DBUILD_EventDefinitionM26=ON -DCMAKE_BUILD_TYPE=RELEASE -DROOT_DIR=$ROOTSYS -DEigen3_DIR=$Eigen3_DIR -Deudaq_DIR=/opt/eudaq2/cmake ..
        - make
        - make install

cmp:cc7-gcc:
    extends:
        - .centos7
        - .compile

cmp:cc7-llvm:
    extends:
        - .centos7
        - .compile
    variables:
        COMPILER_TYPE: "llvm"

cmp:cc8-gcc:
    extends:
        - .centos8
        - .compile

cmp:macos-clang:
    extends:
        - .macos
        - .compile
    script:
        - cmake -GNinja -DCMAKE_CXX_FLAGS="-Werror" -DCMAKE_BUILD_TYPE=RELEASE -DROOT_DIR=$ROOTSYS -DCMAKE_USE_RELATIVE_PATHS=TRUE -DEigen3_DIR=$Eigen3_DIR ..
        - ninja -k0
        - ninja install


##############
# Unit tests #
##############

.test:
    extends: .docker
    stage: testing
    needs:
        - job: cmp:docker
          artifacts: true
    after_script:
        - source .ci/init_x86_64.sh
        - .gitlab/ci/transform_ctest_junit.py build/Testing/`head -n 1 build/Testing/TAG`/Test.xml .gitlab/ci/ctest-to-junit.xsl corry-${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}.xml
    artifacts:
        when: always
        expire_in: 1 week
        name: "corry-${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}"
        paths:
            - corry-${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}.xml
        reports:
            junit: corry-${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}.xml

tst:tracking:
    extends: .test
    script:
        - mkdir -p ../testing/data
        - ctest -R test_tracking --no-compress-output --test-action Test -j1

tst:align:
    extends: .test
    script:
        - mkdir -p ../testing/data
        - ctest -R test_align --no-compress-output --test-action Test -j1

tst:io:
    extends: .test
    script:
        - mkdir -p ../testing/data
        - ctest -R test_io --no-compress-output --test-action Test -j1

tst:sim:
    extends: .test
    script:
        - mkdir -p ../testing/data
        - ctest -R test_sim --no-compress-output --test-action Test -j1


############################
# Format and Lint Checking #
############################

# Hidden key to define the basis for linting and formatting:
.format:
    stage: formatting
    needs: []
    dependencies: []
    extends: .docker
    variables:
        COMPILER_TYPE: "llvm"
    before_script:
        - export CXX=/usr/bin/clang++-12
        - export PATH=~/.local/bin:$PATH
        - mkdir -p build/ && cd build/

fmt:centos7-llvm-format:
    extends: .format
    script:
        - cmake -DCMAKE_CXX_FLAGS="-Werror" -DCMAKE_BUILD_TYPE=RELEASE -DROOT_DIR=$ROOTSYS -DEigen3_DIR=$Eigen3_DIR ..
        - make check-format

fmt:cc7-llvm-lint:
    extends: .format
    script:
        - cmake -DCMAKE_CXX_FLAGS="-Werror" -DBUILD_EventLoaderEUDAQ2=ON -DBUILD_EventDefinitionM26=ON -DCMAKE_BUILD_TYPE=RELEASE -DROOT_DIR=$ROOTSYS -DEigen3_DIR=$Eigen3_DIR -Deudaq_DIR=/opt/eudaq2/cmake ..
        - make check-lint 2> /dev/null
    only:
        - schedules
        - tags

fmt:cc7-llvm-lint-diff:
    extends: .format
    script:
        - git remote add upstream $REPOSITORY && git fetch upstream
        - cmake -DCMAKE_CXX_FLAGS="-Werror" -DBUILD_EventLoaderEUDAQ2=ON -DBUILD_EventDefinitionM26=ON -DCMAKE_BUILD_TYPE=RELEASE -DROOT_DIR=$ROOTSYS -DEigen3_DIR=$Eigen3_DIR -Deudaq_DIR=/opt/eudaq2/cmake -DTARGET_REMOTE="upstream" ..
        - make check-lint-diff 2> /dev/null

fmt:cmake-lint:
    extends: .format
    script:
        - cmake ..
        - make lint-cmake

fmt:codespell:
    extends: .format
    script:
        - cd ../
        - codespell --ignore-words .gitlab/ci/codespell_ignored_words.txt --quiet-level 2 --skip ".git,.gitlab,cmake,3rdparty,*.svg,*.pdf,LICENSES"

fmt:reuse:
    image:
        name: registry.cern.ch/docker.io/fsfe/reuse:latest
        entrypoint: [""]
    tags:
      - docker
    stage: formatting
    needs: []
    dependencies: []
    script:
        - reuse lint



#############################
# Documentation Compilation #
#############################

.doc:
    stage: documentation
    needs: []
    dependencies: []
    tags:
        - docker
    before_script:
        - mkdir -p public/usermanual
        - mkdir build && cd build
    artifacts:
        paths:
            - public
        expire_in: 24 hour

# Compile Doxygen reference
cmp:doxygen:
    extends: .doc
    image: gitlab-registry.cern.ch/sft/docker/centos7:latest
    script:
        - source ../.ci/init_x86_64.sh
        - cmake -GNinja -DBUILD_DOCS_ONLY=ON ..
        - ninja corry_docs_reference
        - mv doc/reference/html ../public/reference

# Compile LaTeX user manual:
cmp:usermanual:
    extends: .doc
    image: gitlab-registry.cern.ch/clicdp/publications/templates/custom_ci_worker:fedora-latex-latest
    script:
        - cmake -DBUILD_DOCS_ONLY=ON ..
        - make pdf
        - mv usermanual/corryvreckan-manual.pdf ../public/usermanual


################################
# Packaging of Binary Tarballs #
################################


.pack:
    stage: packaging
    only:
        - tags@corryvreckan/corryvreckan
        - schedules@corryvreckan/corryvreckan
    before_script:
        - export CCACHE_DIR=`pwd`/ccache
        - source .ci/init_x86_64.sh
        - mkdir -p public/releases
        - cd build
    script:
        - cmake -GNinja -DCMAKE_SKIP_RPATH=ON -DCMAKE_INSTALL_PREFIX=/tmp ..
        - ninja package
        - mv *.tar.gz ../public/releases
    artifacts:
        paths:
            - public
        expire_in: 24 hour

pkg:cc8-gcc:
    extends:
        - .centos8
        - .pack
    needs:
        - job: cmp:cc8-gcc
          artifacts: true

pkg:cc7-gcc:
    extends:
        - .centos7
        - .pack
    needs:
        - job: cmp:cc7-gcc
          artifacts: true

pkg:cc7-llvm:
    extends:
        - .centos7
        - .pack
    needs:
        - job: cmp:cc7-llvm
          artifacts: true
    variables:
        COMPILER_TYPE: "llvm"

pkg:macos-clang:
    extends:
        - .macos
        - .pack
    tags:
        - mac
    needs:
        - job: cmp:macos-clang
          artifacts: true


########################
# Automatic Deployment #
########################

# Automatically deploy documentation to the website
# Deployment job only executed for new tag pushs, not for every commit.
deploy:documentation:
    stage: deployment
    tags:
      - docker
    variables:
        GIT_STRATEGY: none
    # Only run for new tags:
    only:
        - tags@corryvreckan/corryvreckan
    dependencies:
        - cmp:usermanual
        - cmp:doxygen
    # Docker image with tools to deploy to EOS
    image: gitlab-registry.cern.ch/ci-tools/ci-web-deployer:latest
    script:
        - deploy-eos
    # do not run any globally defined before_script or after_script for this step
    before_script: []
    after_script: []

deploy:eos:
    stage: deployment
    tags:
      - docker
    variables:
        GIT_STRATEGY: none
    # Only run for new tags:
    only:
        - tags@corryvreckan/corryvreckan
        - schedules@corryvreckan/corryvreckan
    dependencies:
        - pkg:cc7-gcc
        - pkg:cc8-gcc
        - pkg:macos-clang
    # Docker image with tools to deploy to EOS
    image: gitlab-registry.cern.ch/ci-tools/ci-web-deployer:latest
    script:
        - deploy-eos
    # do not run any globally defined before_script or after_script for this step
    before_script: []
    after_script: []

deploy:cvmfs:
    stage: deployment
    dependencies:
        - pkg:cc7-gcc
        - pkg:cc7-llvm
        - pkg:cc8-gcc
        - pkg:macos-clang
    tags:
        - cvmfs-deploy
    only:
        - tags@corryvreckan/corryvreckan
        - schedules@corryvreckan/corryvreckan
    script:
        - ./.gitlab/ci/download_artifacts.py $API_TOKEN $CI_PROJECT_ID $CI_PIPELINE_ID
        - export RUNNER_LOCATION=$(pwd)
        - if [ -z ${CI_COMMIT_TAG} ]; then export BUILD_PATH='latest'; else export BUILD_PATH=${CI_COMMIT_TAG}; fi
        - sudo -u cvclicdp -i $RUNNER_LOCATION/.gitlab/ci/gitlab_deploy.sh $RUNNER_LOCATION $BUILD_PATH
        - rm -f corryvreckan-*.tar.gz
    retry: 1

.deploy-docker:
    stage: deployment
    image:
        name: gcr.io/kaniko-project/executor:debug
        entrypoint: [""]
    dependencies: []
    script:
        - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
        - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/$DOCKER_FILE --destination $IMAGE_DESTINATION
        - echo "Image pushed successfully to ${IMAGE_DESTINATION}"

deploy:docker-latest:
    extends: .deploy-docker
    variables:
        IMAGE_DESTINATION: ${CI_REGISTRY_IMAGE}:latest
    only:
        - schedules@corryvreckan/corryvreckan

deploy:docker-tag:
    extends: .deploy-docker
    variables:
        IMAGE_DESTINATION: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}
    only:
        - tags@corryvreckan/corryvreckan
